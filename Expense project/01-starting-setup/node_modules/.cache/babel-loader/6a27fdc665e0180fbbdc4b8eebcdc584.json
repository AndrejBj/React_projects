{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\IT\\\\React\\\\project_course1\\\\01-starting-setup\\\\src\\\\components\\\\newExpense\\\\newExpense.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ExpenseForm from \"./expenseForm\";\nimport \"./newExpense.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewExpense = props => {\n  _s();\n\n  //ovaj props uzima podatke od App.js\n  const [isEditing, setIsEditing] = useState(false); //dodajemo novi state, koji kad kliknemo na dugme pokaze tekstualna polja gde unosimo podatke; znaci sad imamo 2 state-a -> jedno sa tekstualnim poljima gde unosimo podatke i jedno sa dugmetom koji kad kliknemo pokaze nam tekstualna polja\n\n  const SaveExpenseDataHandler = enteredExpenseData => {\n    //enteredExpenseData je argument koji ova funkcija ocekuje da ce dobiti (ime nije default, sami smo stavili)\n    const expenseData = { //pravimo novi objekat\n      ...enteredExpenseData,\n      //koji povlaci sve key-eve iz expenseData objekta (od reda 23 do 26) u App.js\n      id: Math.random().toString() //i dodaje novi key id, koji ce nasumicno da daje neki id i pretvori ga u string\n\n    };\n    props.onAddExpense(expenseData); //OVDE SALJEMO OD DETETA KA RODITELJU TAKODJE, OVOG PUTA U APP.JS (LIFTING UP KONCEPT)\n\n    console.log(expenseData); //u konzoli ce sad biti iz ovog fajla log umesto iz expenseForm.js kao sto je bilo do sada\n  }; //u redu 15 gde prosledjujemo podatke u ExpenseForm, smo takodje dodali onSaveExpenseData={}, koja ce imati kao vrednost neku funkciju, koja ce se pozvati unutar ExpenseForm komponente; ta funkcija (koja je opisana od reda 7 do 12) ce se znaci pozvati unutar tog objekta i dati mu vrednost, pa smo na taj nacin IZVUKLI PODATKE OD DETETA KA RODITELJU; takodje nema potrebe da onSaveExpenseData pocinje sa on, ali smo tako stavili kako bi nama bilo prepoznatljivije\n\n\n  const startEditingHandler = () => {\n    //funkcija koja pretvara setIsEditing() u true, pa samim tim funkciju iz reda 7 promeni iz false u true i tada se ne vidi vise dumge \"Add New Expense\" vec se udje u deo gde se u tekstualna polja unose troskovi\n    setIsEditing(true); //ispod se vidi kad se klikne dugme da se pretvara iz false u true i pokrece novi state sa tekstualnim poljima za unosenje troskova\n  };\n\n  const stopEditingHandler = () => {\n    setIsEditing(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-expense\",\n    children: [!isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startEditingHandler,\n      children: \"Add New Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(ExpenseForm, {\n      onSaveExpenseData: SaveExpenseDataHandler,\n      onCancel: stopEditingHandler //prosledjujemo u expenseForm.js fajl u onClick deo gde smo kroz props.onCancel pokrenuli tu funkciju stopEditingHandler i koja pretvara vrednost u false\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewExpense, \"N4qUVpaen/rROL8jPu/4huFD8lA=\");\n\n_c = NewExpense;\nexport default NewExpense; //dodali smo sada dugme u red 16, tako da cemo sad napravati da se tekstualna polja za troskove koji se upisuju na stranici pojaviti tek kad kliknemo to dugme\n\nvar _c;\n\n$RefreshReg$(_c, \"NewExpense\");","map":{"version":3,"names":["React","useState","ExpenseForm","NewExpense","props","isEditing","setIsEditing","SaveExpenseDataHandler","enteredExpenseData","expenseData","id","Math","random","toString","onAddExpense","console","log","startEditingHandler","stopEditingHandler"],"sources":["C:/Users/Master/Desktop/IT/React/project_course1/01-starting-setup/src/components/newExpense/newExpense.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport ExpenseForm from \"./expenseForm\";\r\nimport \"./newExpense.css\";\r\n\r\nconst NewExpense = (props) => {\r\n  //ovaj props uzima podatke od App.js\r\n  const [isEditing, setIsEditing] = useState(false); //dodajemo novi state, koji kad kliknemo na dugme pokaze tekstualna polja gde unosimo podatke; znaci sad imamo 2 state-a -> jedno sa tekstualnim poljima gde unosimo podatke i jedno sa dugmetom koji kad kliknemo pokaze nam tekstualna polja\r\n\r\n  const SaveExpenseDataHandler = (enteredExpenseData) => {\r\n    //enteredExpenseData je argument koji ova funkcija ocekuje da ce dobiti (ime nije default, sami smo stavili)\r\n    const expenseData = {\r\n      //pravimo novi objekat\r\n      ...enteredExpenseData, //koji povlaci sve key-eve iz expenseData objekta (od reda 23 do 26) u App.js\r\n      id: Math.random().toString(), //i dodaje novi key id, koji ce nasumicno da daje neki id i pretvori ga u string\r\n    };\r\n    props.onAddExpense(expenseData); //OVDE SALJEMO OD DETETA KA RODITELJU TAKODJE, OVOG PUTA U APP.JS (LIFTING UP KONCEPT)\r\n    console.log(expenseData); //u konzoli ce sad biti iz ovog fajla log umesto iz expenseForm.js kao sto je bilo do sada\r\n  }; //u redu 15 gde prosledjujemo podatke u ExpenseForm, smo takodje dodali onSaveExpenseData={}, koja ce imati kao vrednost neku funkciju, koja ce se pozvati unutar ExpenseForm komponente; ta funkcija (koja je opisana od reda 7 do 12) ce se znaci pozvati unutar tog objekta i dati mu vrednost, pa smo na taj nacin IZVUKLI PODATKE OD DETETA KA RODITELJU; takodje nema potrebe da onSaveExpenseData pocinje sa on, ali smo tako stavili kako bi nama bilo prepoznatljivije\r\n\r\n  const startEditingHandler = () => {\r\n    //funkcija koja pretvara setIsEditing() u true, pa samim tim funkciju iz reda 7 promeni iz false u true i tada se ne vidi vise dumge \"Add New Expense\" vec se udje u deo gde se u tekstualna polja unose troskovi\r\n    setIsEditing(true); //ispod se vidi kad se klikne dugme da se pretvara iz false u true i pokrece novi state sa tekstualnim poljima za unosenje troskova\r\n  };\r\n\r\n  const stopEditingHandler = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {!isEditing && (\r\n        <button onClick={startEditingHandler}>Add New Expense</button>\r\n      )}\r\n      {isEditing && (\r\n        <ExpenseForm\r\n          onSaveExpenseData={SaveExpenseDataHandler}\r\n          onCancel={stopEditingHandler}                     //prosledjujemo u expenseForm.js fajl u onClick deo gde smo kroz props.onCancel pokrenuli tu funkciju stopEditingHandler i koja pretvara vrednost u false\r\n        />\r\n      )}\r\n      <form></form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n\r\n//dodali smo sada dugme u red 16, tako da cemo sad napravati da se tekstualna polja za troskove koji se upisuju na stranici pojaviti tek kad kliknemo to dugme\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,kBAAP;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;EAAA;;EAC5B;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C,CAF4B,CAEuB;;EAEnD,MAAMM,sBAAsB,GAAIC,kBAAD,IAAwB;IACrD;IACA,MAAMC,WAAW,GAAG,EAClB;MACA,GAAGD,kBAFe;MAEK;MACvBE,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,EAHc,CAGY;;IAHZ,CAApB;IAKAT,KAAK,CAACU,YAAN,CAAmBL,WAAnB,EAPqD,CAOpB;;IACjCM,OAAO,CAACC,GAAR,CAAYP,WAAZ,EARqD,CAQ3B;EAC3B,CATD,CAJ4B,CAazB;;;EAEH,MAAMQ,mBAAmB,GAAG,MAAM;IAChC;IACAX,YAAY,CAAC,IAAD,CAAZ,CAFgC,CAEZ;EACrB,CAHD;;EAKA,MAAMY,kBAAkB,GAAG,MAAM;IAC/BZ,YAAY,CAAC,KAAD,CAAZ;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAC,aAAf;IAAA,WACG,CAACD,SAAD,iBACC;MAAQ,OAAO,EAAEY,mBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,EAIGZ,SAAS,iBACR,QAAC,WAAD;MACE,iBAAiB,EAAEE,sBADrB;MAEE,QAAQ,EAAEW,kBAFZ,CAEoD;;IAFpD;MAAA;MAAA;MAAA;IAAA,QALJ,eAUE;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CAtCD;;GAAMf,U;;KAAAA,U;AAwCN,eAAeA,UAAf,C,CAEA"},"metadata":{},"sourceType":"module"}