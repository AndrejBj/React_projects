{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\IT\\\\React\\\\project_course\\\\01-starting-setup\\\\src\\\\components\\\\ExpenseItem.js\";\nimport './ExpenseItem.css'; //<div>Date</div><div><h2>Title</h2></div><div>Amount</div>   ovako je nepregledno i ima 3 div elementa koji su root elementi, a pravilo React-a je da po return-u moze biti samo 1 div\n//umesto toga mozemo kao u nastavku da dodamo 1 glavni spoljni div, u okviru kojeg ce biti svi ostali div-ovi - to je dozvoljeno; sa shift+alt+F se automatski formatira u pregledniji oblik\n//kad pravimo klase, u html se napise samo class, dok se ovde pise className, s obzirom da ovi div u nastavku koji izgledaju kao HTML kod, nisu pravi HTML vec JSX sastavljen od React tima, sto znaci da je to u pozadini i dalje javascript kod zbog cega prolazi\n//u te klase smo stavili deskripcije po osnovu kojih ce iz css fajla vuci stilizaciju\n\n/* function ExpenseItem() {\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <div>March 28th 2021</div>\r\n      <div className=\"expense-item__description\">\r\n        <h2>Car insurance</h2>\r\n        <div className=\"expense-item__price\">$294.67</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem; */\n//posto se uglavnom ne radi hard-kodovanjem vec dinamicki, prethodni kod cemo da izmenimo na sledeci nacin  \n\n/* function ExpenseItem() {\r\n    const expenseDate = new Date(2021, 2, 28);      //ovo je objekat pa necemo moci samo kao ostala dva da napisemo u {} vec treba naznaciti koji atribut objekta hocemo; u ovom slucaju smo stavili toISOString() koji ce pretvoriti sve atribute u jedan string\r\n    const expenseTitle = \"Car Insurance\";\r\n    const expenseAmount = 294.67;\r\n\r\n    return (\r\n      <div className=\"expense-item\">\r\n        <div>{expenseDate.toISOString()}</div>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{expenseTitle}</h2>\r\n          <div className=\"expense-item__price\">${expenseAmount}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\n//gornji deo je zakomentarisan jer cemo sad ubacivati kroz props objekat atribute u kod, gde taj props objekat ubacimo kao argument funkciji, i kroz dalji kod povlacimo atribute iz App.js koji nam trebaju preko props.nesto\n//u props.date koji povlacimo za datum, nadovezujemo sa funkcijom toISOString() koju smo do sada koristili da taj povuceni datum iz App.js ispise kroz string \n\n/* function ExpenseItem(props) {\r\n    const expenseDate = new Date(2021, 2, 28);      \r\n    const expenseTitle = \"Car Insurance\";\r\n    const expenseAmount = 294.67;\r\n\r\n    return (\r\n      <div className=\"expense-item\">\r\n        <div>{props.date.toISOString()}</div>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>         \r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\n//sledeci korak je da promenimo datum u nesto citljivije, za sta koristimo funkciju toLocaleString(), gde prvi argument bira jezik, a drugi argument je objekat koji konfigurise kako tacno da taj datum bude formatiran\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseItem(props) {\n  const expenseDate = new Date(2021, 2, 28);\n  const expenseTitle = \"Car Insurance\";\n  const expenseAmount = 294.67;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.date.toISOString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", props.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n}\n\n_c = ExpenseItem;\nexport default ExpenseItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["ExpenseItem","props","expenseDate","Date","expenseTitle","expenseAmount","date","toISOString","title","amount"],"sources":["C:/Users/Master/Desktop/IT/React/project_course/01-starting-setup/src/components/ExpenseItem.js"],"sourcesContent":["import './ExpenseItem.css';\r\n\r\n//<div>Date</div><div><h2>Title</h2></div><div>Amount</div>   ovako je nepregledno i ima 3 div elementa koji su root elementi, a pravilo React-a je da po return-u moze biti samo 1 div\r\n//umesto toga mozemo kao u nastavku da dodamo 1 glavni spoljni div, u okviru kojeg ce biti svi ostali div-ovi - to je dozvoljeno; sa shift+alt+F se automatski formatira u pregledniji oblik\r\n//kad pravimo klase, u html se napise samo class, dok se ovde pise className, s obzirom da ovi div u nastavku koji izgledaju kao HTML kod, nisu pravi HTML vec JSX sastavljen od React tima, sto znaci da je to u pozadini i dalje javascript kod zbog cega prolazi\r\n//u te klase smo stavili deskripcije po osnovu kojih ce iz css fajla vuci stilizaciju\r\n\r\n/* function ExpenseItem() {\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <div>March 28th 2021</div>\r\n      <div className=\"expense-item__description\">\r\n        <h2>Car insurance</h2>\r\n        <div className=\"expense-item__price\">$294.67</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem; */\r\n\r\n//posto se uglavnom ne radi hard-kodovanjem vec dinamicki, prethodni kod cemo da izmenimo na sledeci nacin  \r\n\r\n/* function ExpenseItem() {\r\n    const expenseDate = new Date(2021, 2, 28);      //ovo je objekat pa necemo moci samo kao ostala dva da napisemo u {} vec treba naznaciti koji atribut objekta hocemo; u ovom slucaju smo stavili toISOString() koji ce pretvoriti sve atribute u jedan string\r\n    const expenseTitle = \"Car Insurance\";\r\n    const expenseAmount = 294.67;\r\n\r\n    return (\r\n      <div className=\"expense-item\">\r\n        <div>{expenseDate.toISOString()}</div>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{expenseTitle}</h2>\r\n          <div className=\"expense-item__price\">${expenseAmount}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\r\n\r\n\r\n//gornji deo je zakomentarisan jer cemo sad ubacivati kroz props objekat atribute u kod, gde taj props objekat ubacimo kao argument funkciji, i kroz dalji kod povlacimo atribute iz App.js koji nam trebaju preko props.nesto\r\n//u props.date koji povlacimo za datum, nadovezujemo sa funkcijom toISOString() koju smo do sada koristili da taj povuceni datum iz App.js ispise kroz string \r\n\r\n/* function ExpenseItem(props) {\r\n    const expenseDate = new Date(2021, 2, 28);      \r\n    const expenseTitle = \"Car Insurance\";\r\n    const expenseAmount = 294.67;\r\n\r\n    return (\r\n      <div className=\"expense-item\">\r\n        <div>{props.date.toISOString()}</div>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>         \r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\r\n\r\n\r\n  //sledeci korak je da promenimo datum u nesto citljivije, za sta koristimo funkciju toLocaleString(), gde prvi argument bira jezik, a drugi argument je objekat koji konfigurise kako tacno da taj datum bude formatiran\r\n  function ExpenseItem(props) {\r\n    const expenseDate = new Date(2021, 2, 28);      \r\n    const expenseTitle = \"Car Insurance\";\r\n    const expenseAmount = 294.67;\r\n\r\n    return (\r\n      <div className=\"expense-item\">\r\n        <div>{props.date.toISOString()}</div>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>         \r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem;"],"mappings":";AAAA,OAAO,mBAAP,C,CAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE;;;;AACA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;EAC1B,MAAMC,WAAW,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAApB;EACA,MAAMC,YAAY,GAAG,eAArB;EACA,MAAMC,aAAa,GAAG,MAAtB;EAEA,oBACE;IAAK,SAAS,EAAC,cAAf;IAAA,wBACE;MAAA,UAAMJ,KAAK,CAACK,IAAN,CAAWC,WAAX;IAAN;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,2BAAf;MAAA,wBACE;QAAA,UAAKN,KAAK,CAACO;MAAX;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAC,qBAAf;QAAA,gBAAuCP,KAAK,CAACQ,MAA7C;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;KAdQT,W;AAgBT,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}