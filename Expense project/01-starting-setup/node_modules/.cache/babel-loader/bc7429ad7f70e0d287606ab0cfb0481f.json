{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\IT\\\\React\\\\project_course1\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./expenses.css\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n\n  const filterChangeHandler = selectedYear => {\n    //console.log(\"expenses.js\");\n    //console.log(selectedYear);\n    setFilteredYear(selectedYear);\n    const filteredExpenses1 = props.items.filter(expense => {\n      //filter funkcija prodje kroz sve elemente niza i ako je True, ostavlja element, ako je False, izbaci ga; to naravno radi tako sto inicijalni niz ne dira (da se ne izgube podaci) vec pravi novi filtrirani niz\n      return expense.date.getFullYear().toString() === filteredYear; //znaci iz expense ce izvuci datum, koji ce preko getFullYear() pretboriti u celu godinu, a preko toString() tu godinu pretvoriti u string i uporediti to sa filtereYear, pa ce samo filtrirati ono sto je True; ovo radimo jer imamo Date objekat\n    }); //sad smo kod u redu 29 {props.items.map((expense) pretvorili u {filterExpenses.map((expense) da vraca filtrirane elemente\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onChangeFilter: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), filteredExpenses1.map(expense =>\n      /*#__PURE__*/\n      //dole smo hardkodovali koji ce element u expense nizu iznad biti prosledjen u ExpenseItem komponentu i prikazan na stranici; u ovom delu sad to menjamo da bude dinamicki, koristeci map() koji objekte iz expense niza iznad pretvara u JSX objekte i salje u ExpenseItem.js\n      _jsxDEV(ExpenseItem //props.items predstavljaju pokupljeni elementi tog expense niza\n      , {\n        //POSTO MAPIRAMO LISTU ELEMENATA TROSKA, DA BI REACT MOGAO DA IH RAZLIKUJE IZMEDJU SEBE, MORAMO STAVITI OVAJ SPECIJALNI PROP KAKO BI REACT PREPOZNAO TACNO KOJI ITEM TJ TROSAK DODAJEMO, JER SU NJEMU SVI ELEMENTI TROSKA ISTI, A MI SMO STAVILI DA SE RAZLIKUJU PO ID-u\n        title: expense.title //dinamicko dodeljivanje expense vrednosti \n        ,\n        amount: expense.amount,\n        date: expense.date\n      }, expense.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Expenses, \"N/aF5O1Q1Yumn7zBaSWVzvWGO2A=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["React","useState","ExpenseItem","Card","ExpensesFilter","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","filteredExpenses1","items","filter","expense","date","getFullYear","toString","map","title","amount","id"],"sources":["C:/Users/Master/Desktop/IT/React/project_course1/01-starting-setup/src/components/Expenses/expenses.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./expenses.css\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport Card from \"../UI/Card\"; \r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\n\r\n\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\"); \r\n  \r\n  const filterChangeHandler = (selectedYear) => {\r\n    //console.log(\"expenses.js\");\r\n    //console.log(selectedYear);\r\n    setFilteredYear(selectedYear);\r\n\r\n  const filteredExpenses1 = props.items.filter(expense => {               //filter funkcija prodje kroz sve elemente niza i ako je True, ostavlja element, ako je False, izbaci ga; to naravno radi tako sto inicijalni niz ne dira (da se ne izgube podaci) vec pravi novi filtrirani niz\r\n    return expense.date.getFullYear().toString() === filteredYear;       //znaci iz expense ce izvuci datum, koji ce preko getFullYear() pretboriti u celu godinu, a preko toString() tu godinu pretvoriti u string i uporediti to sa filtereYear, pa ce samo filtrirati ono sto je True; ovo radimo jer imamo Date objekat\r\n  });                                                                    //sad smo kod u redu 29 {props.items.map((expense) pretvorili u {filterExpenses.map((expense) da vraca filtrirane elemente\r\n\r\n  };\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        {filteredExpenses1.map((expense) => (           //dole smo hardkodovali koji ce element u expense nizu iznad biti prosledjen u ExpenseItem komponentu i prikazan na stranici; u ovom delu sad to menjamo da bude dinamicki, koristeci map() koji objekte iz expense niza iznad pretvara u JSX objekte i salje u ExpenseItem.js\r\n          <ExpenseItem                                 //props.items predstavljaju pokupljeni elementi tog expense niza\r\n            key={expense.id}                           //POSTO MAPIRAMO LISTU ELEMENATA TROSKA, DA BI REACT MOGAO DA IH RAZLIKUJE IZMEDJU SEBE, MORAMO STAVITI OVAJ SPECIJALNI PROP KAKO BI REACT PREPOZNAO TACNO KOJI ITEM TJ TROSAK DODAJEMO, JER SU NJEMU SVI ELEMENTI TROSKA ISTI, A MI SMO STAVILI DA SE RAZLIKUJU PO ID-u\r\n            title={expense.title}                      //dinamicko dodeljivanje expense vrednosti \r\n            amount={expense.amount}\r\n            date={expense.date}\r\n          />\r\n        ))}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Expenses; \r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,gBAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EAC1B,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,MAAD,CAAhD;;EAEA,MAAMQ,mBAAmB,GAAIC,YAAD,IAAkB;IAC5C;IACA;IACAF,eAAe,CAACE,YAAD,CAAf;IAEF,MAAMC,iBAAiB,GAAGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC,OAAO,IAAI;MAAgB;MACtE,OAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CV,YAAjD,CADsD,CACe;IACtE,CAFyB,CAA1B,CAL8C,CAOyB;EAEtE,CATD;;EAUA,oBACE;IAAA,uBACE,QAAC,IAAD;MAAM,SAAS,EAAC,UAAhB;MAAA,wBACE,QAAC,cAAD;QACE,QAAQ,EAAEA,YADZ;QAEE,cAAc,EAAEE;MAFlB;QAAA;QAAA;QAAA;MAAA,QADF,EAKGE,iBAAiB,CAACO,GAAlB,CAAuBJ,OAAD;MAAA;MAAyB;MAC9C,QAAC,WAAD,CAA6C;MAA7C;QAC6C;QAC3C,KAAK,EAAEA,OAAO,CAACK,KAFjB,CAE6C;QAF7C;QAGE,MAAM,EAAEL,OAAO,CAACM,MAHlB;QAIE,IAAI,EAAEN,OAAO,CAACC;MAJhB,GACOD,OAAO,CAACO,EADf;QAAA;QAAA;QAAA;MAAA,QADD,CALH;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD,CA/BD;;GAAMhB,Q;;KAAAA,Q;AAiCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}