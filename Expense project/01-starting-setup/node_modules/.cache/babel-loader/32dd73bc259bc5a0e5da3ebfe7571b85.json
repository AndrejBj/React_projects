{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\IT\\\\React\\\\project_course1\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./expenses.css\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\n/* const Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState('2020');\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.items.filter(expense => {                //filter funkcija prodje kroz sve elemente niza i ako je True, ostavlja element, ako je False, izbaci ga; to naravno radi tako sto inicijalni niz ne dira (da se ne izgube podaci) vec pravi novi filtrirani niz\r\n    return expense.date.getFullYear().toString() === filteredYear;        //znaci iz expense ce izvuci datum, koji ce preko getFullYear() pretboriti u celu godinu, a preko toString() tu godinu pretvoriti u string i uporediti to sa filtereYear, pa ce samo filtrirati ono sto je True; ovo radimo jer imamo Date objekat\r\n  });                                                                     //sad smo kod u redu 29 {props.items.map((expense) pretvorili u {filterExpenses.map((expense) da vraca filtrirane elemente\r\n\r\n  return (\r\n    <div>\r\n      <Card className='expenses'>\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        {filteredExpenses.length === 0 ? (<p>No expenses found</p>) : (filteredExpenses.map((expense) => (         //preko ternarnog operatora smo ubacili ako filter izbaci prazno, tj ako nema podataka, izbacice \"No expenses found\", u suprotnom izbacuje filtrirane podatke                      \r\n          <ExpenseItem                                                                                             //dole smo hardkodovali koji ce element u expense nizu iznad biti prosledjen u ExpenseItem komponentu i prikazan na stranici; u ovom delu sad to menjamo da bude dinamicki, koristeci map() koji objekte iz expense niza iznad pretvara u JSX objekte i salje u ExpenseItem.js\r\n            key={expense.id}                                                                                       //props.items predstavljaju pokupljeni elementi tog expense niza\r\n            title={expense.title}                                                                                  //POSTO MAPIRAMO LISTU ELEMENATA TROSKA, DA BI REACT MOGAO DA IH RAZLIKUJE IZMEDJU SEBE, MORAMO STAVITI OVAJ SPECIJALNI PROP KAKO BI REACT PREPOZNAO TACNO KOJI ITEM TJ TROSAK DODAJEMO, JER SU NJEMU SVI ELEMENTI TROSKA ISTI, A MI SMO STAVILI DA SE RAZLIKUJU PO ID-u\r\n            amount={expense.amount}                                                                                //dinamicko dodeljivanje expense vrednosti \r\n            date={expense.date}\r\n          />))\r\n/*         {filteredExpenses.map((expense) => (                                                                    //ne koristimo vise ovaj deo koda \r\n          <ExpenseItem                                                    \r\n            key={expense.id}                                              \r\n            title={expense.title}                                        \r\n            amount={expense.amount}\r\n            date={expense.date}\r\n          /> */\n\n/*        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses; */\n//kako bi nam bilo citljivije, ternarni operator iznad mozemo drugacije da napisemo koristeci &&, koji ima istu funkciju ali se moze kod razdvojiti pa je preglednije\n\n/* const Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState('2020');\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.items.filter(expense => {                \r\n    return expense.date.getFullYear().toString() === filteredYear;       \r\n  });                                                                     \r\n\r\n  return (\r\n    <div>\r\n      <Card className='expenses'>\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}                           //u redu 68 sa && stavimo uslov, a u sledecem redu ako ne isupnjava taj uslov, desava se filtriranje podataka\r\n        />\r\n        {filteredExpenses.length === 0 && <p>No expenses found</p>}       \r\n        {filteredExpenses.length > 0 &&\r\n        filteredExpenses.map((expense) => (      \r\n          <ExpenseItem                                                                                             \r\n            key={expense.id}                                                                                       \r\n            title={expense.title}                                                                                  \r\n            amount={expense.amount}                                                                                \r\n            date={expense.date}\r\n          />))\r\n        }\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses; */\n//3. nacin je preko ubacivanje varijable na koju pokazivac iz JSX koda pokazuje\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState('2020');\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  };\n\n  const filteredExpenses = props.items.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  });\n\n  let expensesContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No expenses found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 25\n  }, this);\n\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n      title: expense.title,\n      amount: expense.amount,\n      date: expense.date\n    }, expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this));\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onChangeFilter: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), expensesContent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Expenses, \"d6AxVjxjRbYO2YFEia8LjUybrDc=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["React","useState","ExpenseItem","Card","ExpensesFilter","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","filteredExpenses","items","filter","expense","date","getFullYear","toString","expensesContent","length","map","title","amount","id"],"sources":["C:/Users/Master/Desktop/IT/React/project_course1/01-starting-setup/src/components/Expenses/expenses.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./expenses.css\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport Card from \"../UI/Card\"; \r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\n\r\n/* const Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState('2020');\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.items.filter(expense => {                //filter funkcija prodje kroz sve elemente niza i ako je True, ostavlja element, ako je False, izbaci ga; to naravno radi tako sto inicijalni niz ne dira (da se ne izgube podaci) vec pravi novi filtrirani niz\r\n    return expense.date.getFullYear().toString() === filteredYear;        //znaci iz expense ce izvuci datum, koji ce preko getFullYear() pretboriti u celu godinu, a preko toString() tu godinu pretvoriti u string i uporediti to sa filtereYear, pa ce samo filtrirati ono sto je True; ovo radimo jer imamo Date objekat\r\n  });                                                                     //sad smo kod u redu 29 {props.items.map((expense) pretvorili u {filterExpenses.map((expense) da vraca filtrirane elemente\r\n\r\n  return (\r\n    <div>\r\n      <Card className='expenses'>\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        {filteredExpenses.length === 0 ? (<p>No expenses found</p>) : (filteredExpenses.map((expense) => (         //preko ternarnog operatora smo ubacili ako filter izbaci prazno, tj ako nema podataka, izbacice \"No expenses found\", u suprotnom izbacuje filtrirane podatke                      \r\n          <ExpenseItem                                                                                             //dole smo hardkodovali koji ce element u expense nizu iznad biti prosledjen u ExpenseItem komponentu i prikazan na stranici; u ovom delu sad to menjamo da bude dinamicki, koristeci map() koji objekte iz expense niza iznad pretvara u JSX objekte i salje u ExpenseItem.js\r\n            key={expense.id}                                                                                       //props.items predstavljaju pokupljeni elementi tog expense niza\r\n            title={expense.title}                                                                                  //POSTO MAPIRAMO LISTU ELEMENATA TROSKA, DA BI REACT MOGAO DA IH RAZLIKUJE IZMEDJU SEBE, MORAMO STAVITI OVAJ SPECIJALNI PROP KAKO BI REACT PREPOZNAO TACNO KOJI ITEM TJ TROSAK DODAJEMO, JER SU NJEMU SVI ELEMENTI TROSKA ISTI, A MI SMO STAVILI DA SE RAZLIKUJU PO ID-u\r\n            amount={expense.amount}                                                                                //dinamicko dodeljivanje expense vrednosti \r\n            date={expense.date}\r\n          />))\r\n/*         {filteredExpenses.map((expense) => (                                                                    //ne koristimo vise ovaj deo koda \r\n          <ExpenseItem                                                    \r\n            key={expense.id}                                              \r\n            title={expense.title}                                        \r\n            amount={expense.amount}\r\n            date={expense.date}\r\n          /> */\r\n/*        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses; */\r\n\r\n\r\n//kako bi nam bilo citljivije, ternarni operator iznad mozemo drugacije da napisemo koristeci &&, koji ima istu funkciju ali se moze kod razdvojiti pa je preglednije\r\n/* const Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState('2020');\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.items.filter(expense => {                \r\n    return expense.date.getFullYear().toString() === filteredYear;       \r\n  });                                                                     \r\n\r\n  return (\r\n    <div>\r\n      <Card className='expenses'>\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}                           //u redu 68 sa && stavimo uslov, a u sledecem redu ako ne isupnjava taj uslov, desava se filtriranje podataka\r\n        />\r\n        {filteredExpenses.length === 0 && <p>No expenses found</p>}       \r\n        {filteredExpenses.length > 0 &&\r\n        filteredExpenses.map((expense) => (      \r\n          <ExpenseItem                                                                                             \r\n            key={expense.id}                                                                                       \r\n            title={expense.title}                                                                                  \r\n            amount={expense.amount}                                                                                \r\n            date={expense.date}\r\n          />))\r\n        }\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses; */\r\n\r\n\r\n//3. nacin je preko ubacivanje varijable na koju pokazivac iz JSX koda pokazuje\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState('2020');\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.items.filter(expense => {                \r\n    return expense.date.getFullYear().toString() === filteredYear;       \r\n  });                                                                     \r\n\r\n  let expensesContent = <p>No expenses found</p>;\r\n  if (filteredExpenses.length > 0) {\r\n    expensesContent =  filteredExpenses.map((expense) => (      \r\n      <ExpenseItem                                                                                             \r\n        key={expense.id}                                                                                       \r\n        title={expense.title}                                                                                  \r\n        amount={expense.amount}                                                                                \r\n        date={expense.date}\r\n        />\r\n      ))\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Card className='expenses'>\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}/>\r\n        {expensesContent}                                          \r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,gBAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EAC1B,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,MAAD,CAAhD;;EAEA,MAAMQ,mBAAmB,GAAIC,YAAD,IAAkB;IAC5CF,eAAe,CAACE,YAAD,CAAf;EACD,CAFD;;EAIA,MAAMC,gBAAgB,GAAGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC,OAAO,IAAI;IACrD,OAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CV,YAAjD;EACD,CAFwB,CAAzB;;EAIA,IAAIW,eAAe,gBAAG;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAtB;;EACA,IAAIP,gBAAgB,CAACQ,MAAjB,GAA0B,CAA9B,EAAiC;IAC/BD,eAAe,GAAIP,gBAAgB,CAACS,GAAjB,CAAsBN,OAAD,iBACtC,QAAC,WAAD;MAEE,KAAK,EAAEA,OAAO,CAACO,KAFjB;MAGE,MAAM,EAAEP,OAAO,CAACQ,MAHlB;MAIE,IAAI,EAAER,OAAO,CAACC;IAJhB,GACOD,OAAO,CAACS,EADf;MAAA;MAAA;MAAA;IAAA,QADiB,CAAnB;EAQD;;EAAA;EAGD,oBACE;IAAA,uBACE,QAAC,IAAD;MAAM,SAAS,EAAC,UAAhB;MAAA,wBACE,QAAC,cAAD;QACE,QAAQ,EAAEhB,YADZ;QAEE,cAAc,EAAEE;MAFlB;QAAA;QAAA;QAAA;MAAA,QADF,EAIGS,eAJH;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAUD,CAlCD;;GAAMb,Q;;KAAAA,Q;AAoCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}