{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\IT\\\\React\\\\project_course\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\ExpenseItem.js\";\nimport \"./ExpenseItem.css\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from \"../UI/Card\"; //ovde izmenjuje unutrasnje svetlo sive delove\n//<div>Date</div><div><h2>Title</h2></div><div>Amount</div>   ovako je nepregledno i ima 3 div elementa koji su root elementi, a pravilo React-a je da po return-u moze biti samo 1 div\n//umesto toga mozemo kao u nastavku da dodamo 1 glavni spoljni div, u okviru kojeg ce biti svi ostali div-ovi - to je dozvoljeno; sa shift+alt+F se automatski formatira u pregledniji oblik\n//kad pravimo klase, u html se napise samo class, dok se ovde pise className, s obzirom da ovi div u nastavku koji izgledaju kao HTML kod, nisu pravi HTML vec JSX sastavljen od React tima, sto znaci da je to u pozadini i dalje javascript kod zbog cega prolazi\n//u te klase smo stavili deskripcije po osnovu kojih ce iz css fajla vuci stilizaciju\n\n/* function ExpenseItem() {\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <div>March 28th 2021</div>\r\n      <div className=\"expense-item__description\">\r\n        <h2>Car insurance</h2>\r\n        <div className=\"expense-item__price\">$294.67</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem; */\n//posto se uglavnom ne radi hard-kodovanjem vec dinamicki, prethodni kod cemo da izmenimo na sledeci nacin\n\n/* function ExpenseItem() {\r\n    const expenseDate = new Date(2021, 2, 28);      //ovo je objekat pa necemo moci samo kao ostala dva da napisemo u {} vec treba naznaciti koji atribut objekta hocemo; u ovom slucaju smo stavili toISOString() koji ce pretvoriti sve atribute u jedan string\r\n    const expenseTitle = \"Car Insurance\";\r\n    const expenseAmount = 294.67;\r\n\r\n    return (\r\n      <div className=\"expense-item\">\r\n        <div>{expenseDate.toISOString()}</div>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{expenseTitle}</h2>\r\n          <div className=\"expense-item__price\">${expenseAmount}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\n//gornji deo je zakomentarisan jer cemo sad ubacivati kroz props objekat atribute u kod, gde taj props objekat ubacimo kao argument funkciji, i kroz dalji kod povlacimo atribute iz App.js koji nam trebaju preko props.nesto\n//u props.date koji povlacimo za datum, nadovezujemo sa funkcijom toISOString() koju smo do sada koristili da taj povuceni datum iz App.js ispise kroz string\n\n/* function ExpenseItem(props) {\r\n\r\n    return (\r\n      <div className=\"expense-item\">\r\n        <div>{props.date.toISOString()}</div>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>         \r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\n//sledeci korak je da promenimo datum u nesto citljivije, za sta koristimo funkciju toLocaleString(), gde prvi argument bira jezik, a drugi argument je objekat koji konfigurise kako tacno da taj datum bude formatiran\n\n/* function ExpenseItem(props) {\r\n\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <div>{props.date.toLocaleString(\"en-US\", { month: \"long\" })}</div>\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem; */\n//zbog preglednosti koda bolje je napraviti objekat odvojen od celog koda koji se posle pozove dinamicki; getFullYear() ekstraktuje godinu kao 4-digit broj\n\n/* function ExpenseItem(props) {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <div>\r\n        <div>{month}</div>\r\n        <div>{year}</div>\r\n        <div>{day}</div>\r\n      </div>\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem; */\n//ovde smo samo prebacili deo za datum u novi ExpenseDate.js fajl i na vrh ubacili import odakle ce da vuce te datume\n//s obzirom da <ExpenseDate></ExpenseDate> nemaju nista izmedju otvaranja i zatvaranja, moze da se zapise i kao samozatvarajuci tag <ExpenseDate />\n\n/* function ExpenseItem(props) {\r\n    return (\r\n      <Card className=\"expense-item\">\r\n        <ExpenseDate date={props.date}/>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>\r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\n//u nastavku cemo sad dodati event, zbog cega unosim button\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseItem(props) {\n  //document.getElementById(\"root\").addEventListener()        ovako bi radili da idemo preko javascript, ali posto idemo kroz React preko JSX, radimo kao u nastavku dole kod button\n  const clickHandler = () => {\n    //od sad cemo raditi preko arrow funkcija\n    console.log(\"Clicked!\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(ExpenseDate, {\n      date: props.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", props.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"Click here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ExpenseItem;\nexport default ExpenseItem; //za dugme pisemo onClick={clickHandler} umesto onClick={clickHandler()}, tj samo pokazujemo na funkciju, ne pokrecemo je; na taj nacin se funkcija pokrece kad se desava klik, a u suprotnom bi se pokrenula kad se pokrene ceo JSX, pa bi doslo od reda 127 do 134 i na taj nacin kad bi stiglo do reda 133 pokrenula bi se funkcija\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["ExpenseDate","Card","ExpenseItem","props","clickHandler","console","log","date","title","amount"],"sources":["C:/Users/Master/Desktop/IT/React/project_course/01-starting-setup/src/components/Expenses/ExpenseItem.js"],"sourcesContent":["import \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\"; //ovde izmenjuje unutrasnje svetlo sive delove\r\n\r\n//<div>Date</div><div><h2>Title</h2></div><div>Amount</div>   ovako je nepregledno i ima 3 div elementa koji su root elementi, a pravilo React-a je da po return-u moze biti samo 1 div\r\n//umesto toga mozemo kao u nastavku da dodamo 1 glavni spoljni div, u okviru kojeg ce biti svi ostali div-ovi - to je dozvoljeno; sa shift+alt+F se automatski formatira u pregledniji oblik\r\n//kad pravimo klase, u html se napise samo class, dok se ovde pise className, s obzirom da ovi div u nastavku koji izgledaju kao HTML kod, nisu pravi HTML vec JSX sastavljen od React tima, sto znaci da je to u pozadini i dalje javascript kod zbog cega prolazi\r\n//u te klase smo stavili deskripcije po osnovu kojih ce iz css fajla vuci stilizaciju\r\n\r\n/* function ExpenseItem() {\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <div>March 28th 2021</div>\r\n      <div className=\"expense-item__description\">\r\n        <h2>Car insurance</h2>\r\n        <div className=\"expense-item__price\">$294.67</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem; */\r\n\r\n//posto se uglavnom ne radi hard-kodovanjem vec dinamicki, prethodni kod cemo da izmenimo na sledeci nacin\r\n\r\n/* function ExpenseItem() {\r\n    const expenseDate = new Date(2021, 2, 28);      //ovo je objekat pa necemo moci samo kao ostala dva da napisemo u {} vec treba naznaciti koji atribut objekta hocemo; u ovom slucaju smo stavili toISOString() koji ce pretvoriti sve atribute u jedan string\r\n    const expenseTitle = \"Car Insurance\";\r\n    const expenseAmount = 294.67;\r\n\r\n    return (\r\n      <div className=\"expense-item\">\r\n        <div>{expenseDate.toISOString()}</div>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{expenseTitle}</h2>\r\n          <div className=\"expense-item__price\">${expenseAmount}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\r\n\r\n//gornji deo je zakomentarisan jer cemo sad ubacivati kroz props objekat atribute u kod, gde taj props objekat ubacimo kao argument funkciji, i kroz dalji kod povlacimo atribute iz App.js koji nam trebaju preko props.nesto\r\n//u props.date koji povlacimo za datum, nadovezujemo sa funkcijom toISOString() koju smo do sada koristili da taj povuceni datum iz App.js ispise kroz string\r\n\r\n/* function ExpenseItem(props) {\r\n\r\n    return (\r\n      <div className=\"expense-item\">\r\n        <div>{props.date.toISOString()}</div>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>         \r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\r\n\r\n//sledeci korak je da promenimo datum u nesto citljivije, za sta koristimo funkciju toLocaleString(), gde prvi argument bira jezik, a drugi argument je objekat koji konfigurise kako tacno da taj datum bude formatiran\r\n/* function ExpenseItem(props) {\r\n\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <div>{props.date.toLocaleString(\"en-US\", { month: \"long\" })}</div>\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem; */\r\n\r\n//zbog preglednosti koda bolje je napraviti objekat odvojen od celog koda koji se posle pozove dinamicki; getFullYear() ekstraktuje godinu kao 4-digit broj\r\n/* function ExpenseItem(props) {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <div>\r\n        <div>{month}</div>\r\n        <div>{year}</div>\r\n        <div>{day}</div>\r\n      </div>\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem; */\r\n\r\n//ovde smo samo prebacili deo za datum u novi ExpenseDate.js fajl i na vrh ubacili import odakle ce da vuce te datume\r\n//s obzirom da <ExpenseDate></ExpenseDate> nemaju nista izmedju otvaranja i zatvaranja, moze da se zapise i kao samozatvarajuci tag <ExpenseDate />\r\n\r\n/* function ExpenseItem(props) {\r\n    return (\r\n      <Card className=\"expense-item\">\r\n        <ExpenseDate date={props.date}/>\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>\r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n  \r\n  export default ExpenseItem; */\r\n\r\n\r\n//u nastavku cemo sad dodati event, zbog cega unosim button\r\nfunction ExpenseItem(props) {\r\n  //document.getElementById(\"root\").addEventListener()        ovako bi radili da idemo preko javascript, ali posto idemo kroz React preko JSX, radimo kao u nastavku dole kod button\r\n  const clickHandler = () => {                                //od sad cemo raditi preko arrow funkcija\r\n    console.log(\"Clicked!\");\r\n  }\r\n  \r\n  return (\r\n    <Card className=\"expense-item\">\r\n      <ExpenseDate date={props.date} />\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n      <button onClick={clickHandler}>Click here</button>       \r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n//za dugme pisemo onClick={clickHandler} umesto onClick={clickHandler()}, tj samo pokazujemo na funkciju, ne pokrecemo je; na taj nacin se funkcija pokrece kad se desava klik, a u suprotnom bi se pokrenula kad se pokrene ceo JSX, pa bi doslo od reda 127 do 134 i na taj nacin kad bi stiglo do reda 133 pokrenula bi se funkcija\r\n"],"mappings":";AAAA,OAAO,mBAAP;AACA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB,C,CAA+B;AAE/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;EAC1B;EACA,MAAMC,YAAY,GAAG,MAAM;IAAiC;IAC1DC,OAAO,CAACC,GAAR,CAAY,UAAZ;EACD,CAFD;;EAIA,oBACE,QAAC,IAAD;IAAM,SAAS,EAAC,cAAhB;IAAA,wBACE,QAAC,WAAD;MAAa,IAAI,EAAEH,KAAK,CAACI;IAAzB;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,2BAAf;MAAA,wBACE;QAAA,UAAKJ,KAAK,CAACK;MAAX;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAC,qBAAf;QAAA,gBAAuCL,KAAK,CAACM,MAA7C;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAME;MAAQ,OAAO,EAAEL,YAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;KAhBQF,W;AAkBT,eAAeA,WAAf,C,CACA"},"metadata":{},"sourceType":"module"}