{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\IT\\\\React\\\\project_course1\\\\01-starting-setup\\\\src\\\\components\\\\newExpense\\\\expenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./expenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  //ovaj props uzima podatke od newExpense.js\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  const titleChangeHandler = event => {\n    //ovaj event u zagradi je default objekat koji ce React uvek izbaciti i koji mozemo videti kao ispis kad udjemo u konzolu na browseru\n    setEnteredTitle(event.target.value); //kad napisemo bilo sta u title delu i pogledamo sta nam ispise u konzoli browsera, mozemo da vidimo kad kliknemo na target:input da tu ima brda opcija, odakle smo mi uzeli value; kad onda stavimo events.target.value, u konzoli ce nam ispisati tacno sto napisemo i u nasoj aplikaciji (nece vise ispisivati kao do sada 1x clicked!, 2x clicked! itd), a to je zbog toga sto nam sacuva value kad se desi svaki event (u ovom slucaju klik) \n  }; //(event.target.value) nam \n\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); //takodje (event.target.value) ce uvek dati string, nevezano da li je neki karakter ili broj, uvek je string (zbog toga smo stavili setState(\"\") ovako, da prihvati string)\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  const submitHandler = event => {\n    //funkcija koja pokrece osluskivac prilikom pokretanja nekog eventa, u ovom slucaju kad se pritisne dugme; moramo da je stavimo na pocetak <form> da se odnosi na ceo <form> \n    event.preventDefault(); //po defaultu kad kliknemo dugme stranica ce da se reload-uje, posto browser salje serveru request cim se submituje <form>; nama to ne odgovara jer mi taj submit hocemo da handleujemo preko javascript, da skupimo i koristimo podatke i nesto uradimo s njima (tj podatke koje smo uneli u tekstualna polja); zbog toga da bismo izbegli taj reload, koristimo preventDefault();\n\n    const expenseData = {\n      //posto ovde radimo preko 3 state-a, pravimo objekat koji ce da sva 3 state-a spoji; kad radimo preko spojenog state, onda je to vec uradjeno kao od reda 72 do 75\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate) //Date() je ugradjena funkcija koja pretvara string u objekat za datum \n\n    }; //console.log(expenseData);                                //da mozemo da vidimo rezultat\n\n    props.onSaveExpenseData(expenseData); //prosledjeno iz reda 15 iz fajla newExpense.js (prethodni red nam sad vise ne treba)\n\n    setEnteredTitle(\"\"); //na kraju funkcije stavljamo ovo da nam obrise unete vrednosti iz prozorcica, posto bez toga ostaju tamo; kao novu vrednost stavljamo prazan string tj pocetno stanje, odnosno na taj nacin brisemo podatke\n\n    setEnteredAmount(\"\"); //takodje moramo to da uvezemo dole sa <form> sto radimo tako da dodamo u sva 3 inputa value={}\n\n    setEnteredDate(\"\");\n  };\n\n  return (\n    /*#__PURE__*/\n    //donji deo se odnosi na osluskivac za submit koji se pokrece cim nesto kliknemo\n    _jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: enteredTitle,\n            onChange: titleChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\",\n            value: enteredAmount,\n            onChange: amountChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: \"2019-01-01\",\n            max: \"2022-12-31\",\n            value: enteredDate,\n            onChange: dateChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: props.onCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm; //input tagove u React pisemo kao samozatvarajuce, posto medju otvarajucim i zatvarajucim tagom nema content-a; kod input broja, min=\"0.01\" step=\"0.01\" -> default html atributi za input elemente koji kontrolisu kako se ti elementi mogu koristiti\n//isto vazi i kod input datuma, gde smo stavili da mogu da se koriste samo godine 2019, 2020, 2021 i 2022\n//ZNACI MI SMO KROZ INPUT POSLALI NPR onChange-u FUNKCIJU, A REACT CE INTERNO DA STAVI OSLUSKIVAC I POZVACE TU FUNKCIJU KOJU SMO POSLALI U SLUCAJU DA SE DESI NEKI EVENT ZA PROMENU  \n//u nastavku su 2 nacina kako mozemo preko jednog setState() da uredimo vise state-ova:\n//1. da ne pisemo 3 odvojena state-a, mozemo da uradimo i ovako u jednom state-u:\n\n/* const ExpenseForm = () => {\r\n    const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n    const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n    const [enteredDatee, setEnteredDate] = useState(\"\"); \r\n    const [userInput, setUserInput] = useState({                         //napravimo jedan state u koji umesto stringa ubacimo objekat u kom se nalaze sva 3 state-a koja hocemo da menjamo\r\n        setEnteredTitle: \"\",\r\n        setEnteredAmount: \"\",\r\n        setEnteredDate: \"\",\r\n    })\r\n\r\n    const titleChangeHandler = (event) => {                        \r\n        //setEnteredTitle(event.target.value);\r\n        setUserInput({\r\n            ...userInput,                                                //ovo moramo da navedemo jer React sa ovom funkcijom zameni sva 3 stara state-a sa novim, pa kad dodamo druge state-ove ovako dodamo, on ne zaboravi da doda i te stare state-ove (inace bi ih preskocio i nestali bi)\r\n            enteredTitle: event.target.value,                            //ovde je novi title state, van prethodna dva u redu iznad koja smo povukli kao stare vrednosti da ne bi nestali\r\n        })                      \r\n    }                                                              \r\n    const amountChangeHandler = (event) => {\r\n        //setEnteredAmount(event.target.value);\r\n        setUserInput({\r\n            ...userInput,\r\n            enteredAmount: event.target.value, \r\n        })           \r\n    }\r\n    const dateChangeHandler = (event) => {\r\n        //setEnteredDate(event.target.value);\r\n        setUserInput({\r\n            ...userInput,\r\n            enteredDate: event.target.value, \r\n        })      \r\n    }\r\n\r\n    return (\r\n    <form>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input type=\"text\" onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input type=\"number\" min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler}/>\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input type=\"date\" min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button type=\"submit\">Add Expense</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm; */\n//2. ovo takodje mozemo zapisati ovako\n\n/* const ExpenseForm = () => {\r\n        const [userInput, setUserInput] = useState({                         \r\n            setEnteredTitle: \"\",\r\n            setEnteredAmount: \"\",\r\n            setEnteredDate: \"\",\r\n        })\r\n    \r\n        const titleChangeHandler = (event) => {   \r\n             //setUserInput({\r\n                //...userInput,\r\n               // enteredAmount: event.target.value, \r\n            //});                      \r\n            setUserInput((prevState) => {\r\n                return { ...prevState, enteredTitle: event.target.value };                        //prethodni deo funkcije je bolje napisati ovako, zbog toga sto React prvo uradi schedule za neki update, pa onda uradi update, a nakon toga uradi update sledeceg dela po osnovu tog prvog update-a; prethodni kod zbog toga moze dovesti do toga da neki deo koda bude update-ovan po osnovu starog schedule koji nije bio prvo update-ovan, pa se onda radi novi update po osnovu prvog update koji nije zavrsen, pa bude pogresan rezultat    \r\n            });                      \r\n        }                                                              \r\n        const amountChangeHandler = (event) => {\r\n            //setUserInput({\r\n                //...userInput,\r\n                //enteredAmount: event.target.value, \r\n            //});       \r\n            setUserInput((prevState) => {\r\n                return { ...prevState, enteredAmount: event.target.value };        \r\n            })\r\n        }\r\n        const dateChangeHandler = (event) => {\r\n            //setUserInput({\r\n                //...userInput,\r\n                //enteredDate: event.target.value,\r\n            //});  \r\n            setUserInput((prevState) => {\r\n                    return { ...prevState, enteredDate: event.target.value };        \r\n            })      \r\n        };\r\n    \r\n        return (\r\n        <form>\r\n          <div className=\"new-expense__controls\">\r\n            <div className=\"new-expense__control\">\r\n              <label>Title</label>\r\n              <input type=\"text\" onChange={titleChangeHandler} />\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n              <label>Amount</label>\r\n              <input type=\"number\" min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler}/>\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n              <label>Date</label>\r\n              <input type=\"date\" min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\r\n            </div>\r\n            <div className=\"new-expense__actions\">\r\n              <button type=\"submit\">Add Expense</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      );\r\n    };\r\n    \r\n    export default ExpenseForm; */\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","onCancel"],"sources":["C:/Users/Master/Desktop/IT/React/project_course1/01-starting-setup/src/components/newExpense/expenseForm.js"],"sourcesContent":["import React, {useState} from \"react\";\r\n\r\nimport \"./expenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {                                   //ovaj props uzima podatke od newExpense.js\r\n    const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n    const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n    const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n    const titleChangeHandler = (event) => {                        //ovaj event u zagradi je default objekat koji ce React uvek izbaciti i koji mozemo videti kao ispis kad udjemo u konzolu na browseru\r\n        setEnteredTitle(event.target.value);                       //kad napisemo bilo sta u title delu i pogledamo sta nam ispise u konzoli browsera, mozemo da vidimo kad kliknemo na target:input da tu ima brda opcija, odakle smo mi uzeli value; kad onda stavimo events.target.value, u konzoli ce nam ispisati tacno sto napisemo i u nasoj aplikaciji (nece vise ispisivati kao do sada 1x clicked!, 2x clicked! itd), a to je zbog toga sto nam sacuva value kad se desi svaki event (u ovom slucaju klik) \r\n    }                                                              //(event.target.value) nam \r\n    const amountChangeHandler = (event) => {\r\n        setEnteredAmount(event.target.value);                      //takodje (event.target.value) ce uvek dati string, nevezano da li je neki karakter ili broj, uvek je string (zbog toga smo stavili setState(\"\") ovako, da prihvati string)\r\n    }\r\n    const dateChangeHandler = (event) => {\r\n        setEnteredDate(event.target.value);\r\n    }\r\n\r\n    const submitHandler = (event) => {                             //funkcija koja pokrece osluskivac prilikom pokretanja nekog eventa, u ovom slucaju kad se pritisne dugme; moramo da je stavimo na pocetak <form> da se odnosi na ceo <form> \r\n        event.preventDefault();                                    //po defaultu kad kliknemo dugme stranica ce da se reload-uje, posto browser salje serveru request cim se submituje <form>; nama to ne odgovara jer mi taj submit hocemo da handleujemo preko javascript, da skupimo i koristimo podatke i nesto uradimo s njima (tj podatke koje smo uneli u tekstualna polja); zbog toga da bismo izbegli taj reload, koristimo preventDefault();\r\n\r\n        const expenseData = {                                      //posto ovde radimo preko 3 state-a, pravimo objekat koji ce da sva 3 state-a spoji; kad radimo preko spojenog state, onda je to vec uradjeno kao od reda 72 do 75\r\n            title: enteredTitle,\r\n            amount: +enteredAmount,\r\n            date: new Date(enteredDate)                            //Date() je ugradjena funkcija koja pretvara string u objekat za datum \r\n        }\r\n        //console.log(expenseData);                                //da mozemo da vidimo rezultat\r\n        props.onSaveExpenseData(expenseData);                      //prosledjeno iz reda 15 iz fajla newExpense.js (prethodni red nam sad vise ne treba)\r\n        setEnteredTitle(\"\");                                       //na kraju funkcije stavljamo ovo da nam obrise unete vrednosti iz prozorcica, posto bez toga ostaju tamo; kao novu vrednost stavljamo prazan string tj pocetno stanje, odnosno na taj nacin brisemo podatke\r\n        setEnteredAmount(\"\");                                      //takodje moramo to da uvezemo dole sa <form> sto radimo tako da dodamo u sva 3 inputa value={}\r\n        setEnteredDate(\"\");\r\n    };                          \r\n              \r\n    \r\n    return (                                                       //donji deo se odnosi na osluskivac za submit koji se pokrece cim nesto kliknemo\r\n    <form onSubmit={submitHandler}>                                 \r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input type=\"text\" value={enteredTitle} onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input type=\"number\" min=\"0.01\" step=\"0.01\" value={enteredAmount} onChange={amountChangeHandler}/>\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input type=\"date\" min=\"2019-01-01\" max=\"2022-12-31\" value={enteredDate} onChange={dateChangeHandler}/>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button type=\"button\" onClick={props.onCancel}>Cancel</button>\r\n          <button type=\"submit\">Add Expense</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm; \r\n//input tagove u React pisemo kao samozatvarajuce, posto medju otvarajucim i zatvarajucim tagom nema content-a; kod input broja, min=\"0.01\" step=\"0.01\" -> default html atributi za input elemente koji kontrolisu kako se ti elementi mogu koristiti\r\n//isto vazi i kod input datuma, gde smo stavili da mogu da se koriste samo godine 2019, 2020, 2021 i 2022\r\n//ZNACI MI SMO KROZ INPUT POSLALI NPR onChange-u FUNKCIJU, A REACT CE INTERNO DA STAVI OSLUSKIVAC I POZVACE TU FUNKCIJU KOJU SMO POSLALI U SLUCAJU DA SE DESI NEKI EVENT ZA PROMENU  \r\n\r\n\r\n//u nastavku su 2 nacina kako mozemo preko jednog setState() da uredimo vise state-ova:\r\n\r\n//1. da ne pisemo 3 odvojena state-a, mozemo da uradimo i ovako u jednom state-u:\r\n/* const ExpenseForm = () => {\r\n    const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n    const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n    const [enteredDatee, setEnteredDate] = useState(\"\"); \r\n    const [userInput, setUserInput] = useState({                         //napravimo jedan state u koji umesto stringa ubacimo objekat u kom se nalaze sva 3 state-a koja hocemo da menjamo\r\n        setEnteredTitle: \"\",\r\n        setEnteredAmount: \"\",\r\n        setEnteredDate: \"\",\r\n    })\r\n\r\n    const titleChangeHandler = (event) => {                        \r\n        //setEnteredTitle(event.target.value);\r\n        setUserInput({\r\n            ...userInput,                                                //ovo moramo da navedemo jer React sa ovom funkcijom zameni sva 3 stara state-a sa novim, pa kad dodamo druge state-ove ovako dodamo, on ne zaboravi da doda i te stare state-ove (inace bi ih preskocio i nestali bi)\r\n            enteredTitle: event.target.value,                            //ovde je novi title state, van prethodna dva u redu iznad koja smo povukli kao stare vrednosti da ne bi nestali\r\n        })                      \r\n    }                                                              \r\n    const amountChangeHandler = (event) => {\r\n        //setEnteredAmount(event.target.value);\r\n        setUserInput({\r\n            ...userInput,\r\n            enteredAmount: event.target.value, \r\n        })           \r\n    }\r\n    const dateChangeHandler = (event) => {\r\n        //setEnteredDate(event.target.value);\r\n        setUserInput({\r\n            ...userInput,\r\n            enteredDate: event.target.value, \r\n        })      \r\n    }\r\n\r\n    return (\r\n    <form>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input type=\"text\" onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input type=\"number\" min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler}/>\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input type=\"date\" min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button type=\"submit\">Add Expense</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm; */\r\n\r\n\r\n\r\n//2. ovo takodje mozemo zapisati ovako\r\n/* const ExpenseForm = () => {\r\n        const [userInput, setUserInput] = useState({                         \r\n            setEnteredTitle: \"\",\r\n            setEnteredAmount: \"\",\r\n            setEnteredDate: \"\",\r\n        })\r\n    \r\n        const titleChangeHandler = (event) => {   \r\n             //setUserInput({\r\n                //...userInput,\r\n               // enteredAmount: event.target.value, \r\n            //});                      \r\n            setUserInput((prevState) => {\r\n                return { ...prevState, enteredTitle: event.target.value };                        //prethodni deo funkcije je bolje napisati ovako, zbog toga sto React prvo uradi schedule za neki update, pa onda uradi update, a nakon toga uradi update sledeceg dela po osnovu tog prvog update-a; prethodni kod zbog toga moze dovesti do toga da neki deo koda bude update-ovan po osnovu starog schedule koji nije bio prvo update-ovan, pa se onda radi novi update po osnovu prvog update koji nije zavrsen, pa bude pogresan rezultat    \r\n            });                      \r\n        }                                                              \r\n        const amountChangeHandler = (event) => {\r\n            //setUserInput({\r\n                //...userInput,\r\n                //enteredAmount: event.target.value, \r\n            //});       \r\n            setUserInput((prevState) => {\r\n                return { ...prevState, enteredAmount: event.target.value };        \r\n            })\r\n        }\r\n        const dateChangeHandler = (event) => {\r\n            //setUserInput({\r\n                //...userInput,\r\n                //enteredDate: event.target.value,\r\n            //});  \r\n            setUserInput((prevState) => {\r\n                    return { ...prevState, enteredDate: event.target.value };        \r\n            })      \r\n        };\r\n    \r\n        return (\r\n        <form>\r\n          <div className=\"new-expense__controls\">\r\n            <div className=\"new-expense__control\">\r\n              <label>Title</label>\r\n              <input type=\"text\" onChange={titleChangeHandler} />\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n              <label>Amount</label>\r\n              <input type=\"number\" min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler}/>\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n              <label>Date</label>\r\n              <input type=\"date\" min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\r\n            </div>\r\n            <div className=\"new-expense__actions\">\r\n              <button type=\"submit\">Add Expense</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      );\r\n    };\r\n    \r\n    export default ExpenseForm; */"],"mappings":"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"},"metadata":{},"sourceType":"module"}