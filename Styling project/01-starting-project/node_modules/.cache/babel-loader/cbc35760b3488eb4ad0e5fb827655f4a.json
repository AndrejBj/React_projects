{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\IT\\\\React\\\\Styling project\\\\01-starting-project\\\\src\\\\components\\\\CourseGoals\\\\CourseInput\\\\CourseInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from \"../../UI/Button/Button\";\nimport \"./CourseInput.css\";\nimport styled from \"styled-components\"; //u nastavku stilizujemo div iz CourseInput css fajla i da bi ga koristili, menjamo <div> dole u kodu sa FormControl  \n//kad koristimo invalid props u css kodu, u input delu border: 1px solid #ccc; smo izmenili tako da koristimo props tj border: 1px solid ${props => props.invalid ? \"red\" : \"#ccc\"}; tako smo i za ostale\n//na taj nacin mozemo da sklonimo poslednja dva dela koda za invalid deo (pogledaj CourseInput fajl) jer smo ih vec dinamicki postavili \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormControl = styled.div`\n   margin: 0.5rem 0;\n\n  & label {\n    font-weight: bold;\n    display: block;\n    margin-bottom: 0.5rem;\n    color: ${props => props.invalid ? \"red\" : \"black\"}\n  }\n\n  & input {\n    display: block;\n    width: 100%;\n    border: 1px solid ${props => props.invalid ? \"red\" : \"#ccc\"};\n    background: ${props => props.invalid ? \"#black\" : \"transparent\"}\n    font: inherit;\n    line-height: 1.5rem;\n    padding: 0 0.25rem;\n  }\n\n  & input:focus {\n    outline: none;\n    background: #fad0ec;\n    border-color: #8b005d;\n  }\n`;\n_c = FormControl;\n\nconst CourseInput = props => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isValid, setIsValid] = useState(true); //krecemo od toga da smo uneli nesto validno i da je onda true, ako nije validno onda je false\n\n  const goalInputChangeHandler = event => {\n    if (event.target.value.trim().length > 0) {\n      //ovde smo uneli ovaj deo koji u slucaju da je bilo obojeno tekstualno polje zbog prethodnog nevalidnog unosa, i sad kad nesto ponovo upisemo, automatski se obrise boja koja je ranije bila tu zbog prethodnog nevalidnog unosa \n      setIsValid(true);\n    }\n\n    setEnteredValue(event.target.value);\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n\n    if (enteredValue.trim().length === 0) {\n      //ako je veci length od 0, znaci da ima nesto ukucano i validno je; ovim i sledecim redom onemogucavamo izbacivanje ljubicastog div tj pravouganika koji se ispise prazan kad ne ukucamo nista; trim() izbacuje blenkove                                                      \n      setIsValid(false); //ovde imamo false jer ne bi inace usli u taj if deo koji se pokrece samo ako je nevalidno\n\n      return;\n    }\n\n    props.onAddGoal(enteredValue);\n  };\n  /*   return (                                                                   //{color: !isValid ? \"red\" : \"black\"} daje crvenu boju slova ako smo ukucali nesto nevalidno, u suprotnom ide crna boja; isValid je u redu 8 namesten kao true, pa ako nije true, onda je false tj nevalidan\n      <form onSubmit={formSubmitHandler}>\n        <div className=\"form-control\">\n          <label style={{ color: !isValid ? \"red\" : \"black\" }}>Course Goal</label>\n          <input\n            style=\n            {{ borderColor: !isValid ? \"red\" : \"#ccc\",                         //borderColor ispod daje boje za tekstualno polje gde pisemo \n            background: !isValid ? \"salmon\" : \"transparent\"\n          }}                  \n            type=\"text\"\n            onChange={goalInputChangeHandler}\n          />\n        </div>\n        <Button type=\"submit\">Add Goal</Button>\n      </form>\n    );\n  };\n  \n  export default CourseInput; */\n  //u nastavku cemo JSX deo da izmenimo tako da dodamo dinamicki CSS klase\n  //{`form-control ${!isValid ? \"invalid\" : \"\"}`} ce izbaciti ili form-control ili form-control invalid, gde $ u okviru `` pravi konkatenaciju i spaja to sto je unutar {} u slucaju da je nevalidan upis  \n\n  /* return (                                                                    \n  <form onSubmit={formSubmitHandler}>\n    <div className={`form-control ${!isValid ? \"invalid\" : \"\"}`}>\n      <label>Course Goal</label>\n      <input             \n        type=\"text\"\n        onChange={goalInputChangeHandler}\n      />\n    </div>\n    <Button type=\"submit\">Add Goal</Button>\n  </form>\n  );\n  };\n  \n  export default CourseInput; */\n  //sad gornji deo koda menjamo tako sto preko styled-components ubacujemo FromControl umesto <div> koji stilizuje taj <div>, pa ne koristimo vise prethodni -> div className={`form-control ${!isValid ? \"invalid\" : \"\"}`}\n  //s obzirom da styled-components metodi (u ovom slucaju div``) prosledjuju props koji su bili na njima, da bi radio kod kao i pre, moramo samo da dodamo className={!isValid && \"invalid\"} koji drugacije stilizuje validan/nevalidan tekst kao sto smo pre imali \n\n  /* return (                                                                    \n    <form onSubmit={formSubmitHandler}>    \n      <FormControl className={!isValid && \"invalid\"}>    \n        <label>Course Goal</label>  \n        <input             \n          type=\"text\"\n          onChange={goalInputChangeHandler}\n        />\n      </FormControl>\n      <Button type=\"submit\">Add Goal</Button>\n    </form>\n    );\n    };\n    \n    export default CourseInput; */\n  //mozemo da radimo i preko props za pojedinacne delove css koda, tako sto stavimo invalid={!isValid} tj kad je isValid=true, invalid=false i nece se desiti, a kad je isValid=false, invalid=true, pa ce se desiti taj deo invalid koda \n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      invalid: !isValid,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Course Goal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: goalInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"Add Goal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CourseInput, \"ThKE3neuvaE9uj2GU0j+/HEwCa4=\");\n\n_c2 = CourseInput;\nexport default CourseInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FormControl\");\n$RefreshReg$(_c2, \"CourseInput\");","map":{"version":3,"names":["React","useState","Button","styled","FormControl","div","props","invalid","CourseInput","enteredValue","setEnteredValue","isValid","setIsValid","goalInputChangeHandler","event","target","value","trim","length","formSubmitHandler","preventDefault","onAddGoal"],"sources":["C:/Users/Master/Desktop/IT/React/Styling project/01-starting-project/src/components/CourseGoals/CourseInput/CourseInput.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport Button from \"../../UI/Button/Button\";\nimport \"./CourseInput.css\";\nimport styled from \"styled-components\";\n\n//u nastavku stilizujemo div iz CourseInput css fajla i da bi ga koristili, menjamo <div> dole u kodu sa FormControl  \n//kad koristimo invalid props u css kodu, u input delu border: 1px solid #ccc; smo izmenili tako da koristimo props tj border: 1px solid ${props => props.invalid ? \"red\" : \"#ccc\"}; tako smo i za ostale\n//na taj nacin mozemo da sklonimo poslednja dva dela koda za invalid deo (pogledaj CourseInput fajl) jer smo ih vec dinamicki postavili \nconst FormControl = styled.div`\n   margin: 0.5rem 0;\n\n  & label {\n    font-weight: bold;\n    display: block;\n    margin-bottom: 0.5rem;\n    color: ${props => props.invalid ? \"red\" : \"black\"}\n  }\n\n  & input {\n    display: block;\n    width: 100%;\n    border: 1px solid ${props => props.invalid ? \"red\" : \"#ccc\"};\n    background: ${props => props.invalid ? \"#black\" : \"transparent\"}\n    font: inherit;\n    line-height: 1.5rem;\n    padding: 0 0.25rem;\n  }\n\n  & input:focus {\n    outline: none;\n    background: #fad0ec;\n    border-color: #8b005d;\n  }\n`;\n\nconst CourseInput = (props) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);                              //krecemo od toga da smo uneli nesto validno i da je onda true, ako nije validno onda je false\n\n  const goalInputChangeHandler = (event) => {\n    if(event.target.value.trim().length > 0) {                               //ovde smo uneli ovaj deo koji u slucaju da je bilo obojeno tekstualno polje zbog prethodnog nevalidnog unosa, i sad kad nesto ponovo upisemo, automatski se obrise boja koja je ranije bila tu zbog prethodnog nevalidnog unosa \n      setIsValid(true);\n    }\n    setEnteredValue(event.target.value);\n  };\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n    if (enteredValue.trim().length === 0) {                                  //ako je veci length od 0, znaci da ima nesto ukucano i validno je; ovim i sledecim redom onemogucavamo izbacivanje ljubicastog div tj pravouganika koji se ispise prazan kad ne ukucamo nista; trim() izbacuje blenkove                                                      \n      setIsValid(false);                                                     //ovde imamo false jer ne bi inace usli u taj if deo koji se pokrece samo ako je nevalidno\n      return;\n    }\n    props.onAddGoal(enteredValue);\n  };\n\n/*   return (                                                                   //{color: !isValid ? \"red\" : \"black\"} daje crvenu boju slova ako smo ukucali nesto nevalidno, u suprotnom ide crna boja; isValid je u redu 8 namesten kao true, pa ako nije true, onda je false tj nevalidan\n    <form onSubmit={formSubmitHandler}>\n      <div className=\"form-control\">\n        <label style={{ color: !isValid ? \"red\" : \"black\" }}>Course Goal</label>\n        <input\n          style=\n          {{ borderColor: !isValid ? \"red\" : \"#ccc\",                         //borderColor ispod daje boje za tekstualno polje gde pisemo \n          background: !isValid ? \"salmon\" : \"transparent\"\n        }}                  \n          type=\"text\"\n          onChange={goalInputChangeHandler}\n        />\n      </div>\n      <Button type=\"submit\">Add Goal</Button>\n    </form>\n  );\n};\n\nexport default CourseInput; */\n\n\n//u nastavku cemo JSX deo da izmenimo tako da dodamo dinamicki CSS klase\n//{`form-control ${!isValid ? \"invalid\" : \"\"}`} ce izbaciti ili form-control ili form-control invalid, gde $ u okviru `` pravi konkatenaciju i spaja to sto je unutar {} u slucaju da je nevalidan upis  \n/* return (                                                                    \n<form onSubmit={formSubmitHandler}>\n  <div className={`form-control ${!isValid ? \"invalid\" : \"\"}`}>\n    <label>Course Goal</label>\n    <input             \n      type=\"text\"\n      onChange={goalInputChangeHandler}\n    />\n  </div>\n  <Button type=\"submit\">Add Goal</Button>\n</form>\n);\n};\n\nexport default CourseInput; */\n\n\n//sad gornji deo koda menjamo tako sto preko styled-components ubacujemo FromControl umesto <div> koji stilizuje taj <div>, pa ne koristimo vise prethodni -> div className={`form-control ${!isValid ? \"invalid\" : \"\"}`}\n//s obzirom da styled-components metodi (u ovom slucaju div``) prosledjuju props koji su bili na njima, da bi radio kod kao i pre, moramo samo da dodamo className={!isValid && \"invalid\"} koji drugacije stilizuje validan/nevalidan tekst kao sto smo pre imali \n/* return (                                                                    \n  <form onSubmit={formSubmitHandler}>    \n    <FormControl className={!isValid && \"invalid\"}>    \n      <label>Course Goal</label>  \n      <input             \n        type=\"text\"\n        onChange={goalInputChangeHandler}\n      />\n    </FormControl>\n    <Button type=\"submit\">Add Goal</Button>\n  </form>\n  );\n  };\n  \n  export default CourseInput; */\n\n\n//mozemo da radimo i preko props za pojedinacne delove css koda, tako sto stavimo invalid={!isValid} tj kad je isValid=true, invalid=false i nece se desiti, a kad je isValid=false, invalid=true, pa ce se desiti taj deo invalid koda \nreturn (                                                                    \n  <form onSubmit={formSubmitHandler}>    \n    <FormControl invalid={!isValid}>    \n      <label>Course Goal</label>  \n      <input             \n        type=\"text\"\n        onChange={goalInputChangeHandler}\n      />\n    </FormControl>\n    <Button type=\"submit\">Add Goal</Button>\n  </form>\n  );\n  };\n  \n  export default CourseInput;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,mBAAP;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;AACA;AACA;;;AACA,MAAMC,WAAW,GAAGD,MAAM,CAACE,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,aAAaC,KAAK,IAAIA,KAAK,CAACC,OAAN,GAAgB,KAAhB,GAAwB,OAAQ;AACtD;AACA;AACA;AACA;AACA;AACA,wBAAwBD,KAAK,IAAIA,KAAK,CAACC,OAAN,GAAgB,KAAhB,GAAwB,MAAO;AAChE,kBAAkBD,KAAK,IAAIA,KAAK,CAACC,OAAN,GAAgB,QAAhB,GAA2B,aAAc;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBA;KAAMH,W;;AA2BN,MAAMI,WAAW,GAAIF,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC,CAF6B,CAE8C;;EAE3E,MAAMY,sBAAsB,GAAIC,KAAD,IAAW;IACxC,IAAGA,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,GAA0BC,MAA1B,GAAmC,CAAtC,EAAyC;MAAgC;MACvEN,UAAU,CAAC,IAAD,CAAV;IACD;;IACDF,eAAe,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;EACD,CALD;;EAOA,MAAMG,iBAAiB,GAAIL,KAAD,IAAW;IACnCA,KAAK,CAACM,cAAN;;IACA,IAAIX,YAAY,CAACQ,IAAb,GAAoBC,MAApB,KAA+B,CAAnC,EAAsC;MAAmC;MACvEN,UAAU,CAAC,KAAD,CAAV,CADoC,CACmC;;MACvE;IACD;;IACDN,KAAK,CAACe,SAAN,CAAgBZ,YAAhB;EACD,CAPD;EASF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGA;EACA;;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGA;EACA;;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGA;;;EACA,oBACE;IAAM,QAAQ,EAAEU,iBAAhB;IAAA,wBACE,QAAC,WAAD;MAAa,OAAO,EAAE,CAACR,OAAvB;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,QAAQ,EAAEE;MAFZ;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYG,CA5FH;;GAAML,W;;MAAAA,W;AA8FJ,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}